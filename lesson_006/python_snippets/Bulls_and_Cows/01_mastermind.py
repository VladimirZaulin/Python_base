# -*- coding: utf-8 -*-
from mastermind_engine import generate_number, check_number
from termcolor import cprint, COLORS


# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названном числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названном числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В этом модуле нужно реализовать функции:
#   загадать_число() +
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем делать в текущем модуле. Представьте, что движок игры могут использовать
# разные клиенты - веб, чатбот, приложение, етс - они знают как спрашивать и отвечать пользователю.
# Движок игры реализует только саму функциональность игры.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT


def game_of_bulls():
    cprint('Привет, угадай какие 4 цифры я загадал!')
    print('Если угадаешь число и его место я дам тебе быка')
    print('Если если одно из твоих чисел включает и мое, за каждую такую дам тебе корову')
    cprint('Введи 4-х значное число:')
    generate_number()
    bulls, cows = check_number()
    print('Быки -', bulls,'Коровы -', cows)
    while bulls < 4:
        print('Так близко!')
        bulls, cows = check_number()
        print('Быки -', bulls,'Коровы -', cows)
    else:
        cprint('Вы победили! Хотите ещё разок? Да/Нет', color="light_green")
        user_input = input()
        if user_input == 'Да' or user_input == 'да' or user_input == 'ок' or user_input == 'ok':
            game_of_bulls()
        else:
            cprint('Спасибо за игру, пока!',color="light_magenta",on_color='on_light_yellow')
            quit()





game_of_bulls()